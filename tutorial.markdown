---
layout: default
title: Pharen Tutorial
---

### About this tutorial{#goal}
The goal of this tutorial is to get started with Pharen by writing a bare-bones pastebin. Each section will be split into a code-centered portion followed by a more in-depth look. You can initially skip the in-depth stuff to get something up and running fast, then come back later if you want to understand more.

### Prerequisites {#prerequisites}
This tutorial is somewhat Unix-oriented and requires knowledge of its command-line. Windows users may need to adapt some of the instructions. However, most of it is platform-agnostic.

You will need a server that can handle PHP files and a text editor. If you want language integration you can set your editor to use a plugin for another Lisp. For example, I currently use VimClojure and have it treat Pharen (.phn) files as Clojure files.

### Getting set up {#set-up}
First, get Pharen from the [download page](/pharen/download.html). Then open up a shell, cd into the directory the Pharen files are located and run:

{% highlight bash %}
./install.sh
{% endhighlight %}

This installs the `pharen` command so you can use it from anywhere.

### Hello world {#hello-world}
Open a text editor (any should work) and enter the following code:

{% highlight clojure %}
; This is a comment and won't show up
(print "Hello, world!")
{% endhighlight %}

Save this in your server's document root directory as `hello.phn`. From inside this directory run the following command to compile it:

{% highlight bash %}
pharen hello.phn
{% endhighlight %}

If you go to [http://localhost/hello.php]() you will see "Hello, world!" printed out. Very basic, but it shows the nitty-gritty details are done.

### More complex expressions {#complex-expressions}
How about a little more practice? Go back to `hello.phn` and enter the following code:

{% highlight clojure %}
(def id ($ get "id"))
(def clean-id (addslashes id))

(if (< clean-id 0)
  (print "Invalid id, cannot be less than 0.")
  (print (. "Fetching page with id: " id)))
{% endhighlight %}

Recompile with:
{% highlight bash %}
pharen hello.phn
{% endhighlight %}

Now try loading [http://localhost/hello.php?id=8](). The page should respond with "Fetching page with id: 8".

### Dynamic pages {#dynamic-pages}
Let's use what we know to write something that will fetch pastes for our pastebin. Create a directory inside your server's document directory called `pharenpastebin`. All project files should from now on be placed inside here. Create a file called `paste.phn` and enter the following code:

{% highlight clojure %}
(require "sql")

(sql-connect "your-username" "your-password" "pastebindb")

(when (isset ($ get "id"))
  (def row (sql-fetch-by-id "pages" ($ get "id")))
  (print "<h2>" (:row "title") "</h2>"
         "<p>" (:row "contents") "</p>"))
{% endhighlight %}
For now, the MySQL database is assumed. Make sure you replace your-username and your-password. You can either create a pastebindb database or use an existing one. Of course, we can't test this since there's nothing in the database. Let's fix that.

### Form handling {#form-handling}
Run the following SQL in your database (through whatever db front-end you use, maybe PHPMyAdmin).

{% highlight sql %}
CREATE TABLE "pages" (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(255) UNIQUE,
  contents TEXT
);
{% endhighlight %}

Start by creating a new file called `new.phn`. Then use the following code:

{% highlight clojure %}
(require "sql")
(require "html")

(when (isset ($ post "submit"))
  (sql-insert "pages" 
              {"title" ($ post "title") ,
               "contents" ($ post "contents")})
  (print (html-link (. "/page?id=" (mysql-insert-id)) "New paste.")))

(print (html-form "post" ($ server "PHP_SELF")
                  (html-textbox "title")
                  (html-textarea "contents")
                  (html-submit "submit")))
{% endhighlight %}

Compile it from inside the `pharentodo` directory by running: 
{% highlight bash %}
pharen new.phn
{% endhighlight %}

Now go to [http://localhost/pharenpastebin/new.phn](). You will see a form. Enter anything you want (don't worry, the values will be automatically sanitized) and submit it. If everything works, you'll get a link. For now, that link won't work but keep this page open anyway while we fix this.

Compile this file. Go back to the open web page where you submitted the form and click the link. It should take you to the page generated by the above code.

### Throwing in a template {#template}
We now have a functional application, but the code could use a little (okay, a *lot* of) work. For example, if we wanted to create an edit feature we would have to copy the form code from the creation feature. Let's create some template functions to deal with printing all the HTML. First, create a new file called `tpl.phn` and add the following code:

{% highlight clojure %}
(fn tpl (title contents)
    (sprintf "
<html>
  <head>
    <title>%s</title></head>
  <body>
    <h2>%s</h2>
    <p>
		%s
	</p>
  </body>
</html>" title title contents))
{% endhighlight %}

Compile this file. Now we'll use this function when fetching a paste.

{% highlight clojure %}
(require "tpl.php")

(when (isset ($ get "id"))
  (def row (sql-fetch-by-id "pages" ($ get "id")))
  (tpl (:row "title") (:row "contents")))
{% endhighlight %}

All we did was write a function that deals will *all* the html. The original code only has to worry about providing the data. It's not quite MVC, but it's an improvement! Now let's do the same with `new.phn`. Change it to the following:

{% highlight clojure %}
(require "html.php")
(require "tpl.php")

(fn form (status)
  (tpl "New Paste" (. status "<br/>"
                      (html-form "post" ($ server "PHP_SELF")
                                 (html-textbox "title")
                                 (html-textarea "contents")
                                 (html-submit "submit")))))

(def status
  (when (isset ($ post "submit"))
    (sql-insert "pages" 
                {"title" ($ post "title") ,
                 "contents" ($ post "contents")})
    (html-link (. "/page?id=" (mysql-insert-id)) "here")))

(form status)
{% endhighlight %}

Again, we separated markup-related code from the business logic.

### What's next {#whats-next}
That's it for this tutorial. By now you should have a feel programming in Pharen. Some things you can do from here:
* Read the in-depth sections, if you haven't.
* Add more features to the pastebin, maybe editing pastes.
* Learn about cooler features, like [macros](/pharen/reference.html#macros), or [tail recursion elimination](/pharen/reference.html#tre).
* [Contribute](/pharen/contribute.html) to Pharen.
