(require_once "path.php")
(define "PHAKE_SYSTEM" (realpath (dirname __FILE__)))
(define "PHAREN_SYSTEM" (path-join PHAKE-SYSTEM "../.."))
(define "PROJECT_SYSTEM" (getcwd))

(require-once (. PHAREN-SYSTEM "/pharen.php"))
(compile-lang)

(fn proj (name attrs)
  "Do stuff with project info here")

(fn project-path (f)
  (. PROJECT-SYSTEM f))

(fn not-dots (dir)
  (and (!== "." dir) (!== ".." dir)))

(fn compile-with-flag (flag file)
  (set-flag flag)
  (compile-file file)
  (unset-flag flag))

(fn compile-except (excepts file [output-dir NULL])
  (when (not (in-array file excepts))
    (compile-file file)))

(fn is-phn (f)
  (and (isset (:(pathinfo f) "extension"))
       (== (:(pathinfo f) "extension") "phn")))

(fn compile-dir (dir [compile-func #compile-file])
  (map 
    (lambda (f)
            (def file (path-join dir f))
            (cond
              ((and (not-dots f) (is-dir file)) (compile-dir file compile-func))
              ((is-phn file) (and ($compile-func file (dirname file)) (print (. "Compile: " file "\n"))))))
    (scandir dir 1)))


(defmacro task (name desc &body)
  '(fn ~-name () 
     (print (. "Running " ~name ": " ~desc "\n"))
      ~@body))

(compile-with-flag "executable" (. PHAKE-SYSTEM "/phake.phn"))
(compile-file (project-path "/phakefile"))
(require (project-path "/phakefile.php"))

(if (> (count argv) 1)
  ((:argv 1))
  (print "Doing nothing\n"))
