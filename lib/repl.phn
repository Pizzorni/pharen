(ns pharen-repl)
(require_once "path.php")
(define "REPL_SYSTEM" (realpath (dirname __FILE__)))
(define "PHAREN_SYSTEM" (path-join REPL-SYSTEM "../"))

(require-once (. PHAREN_SYSTEM "/pharen.php"))

(def greetings ["Maybe solve P v NP!" "Happy Pharening!" "(map) new worlds!"
                "Maybe solve Hello World!" "Curly fries are delicious and cheap!"])

(if (function-exists "readline")
  (fn prompt (prompt)
    (let [line (trim (readline prompt))]
      (readline-add-history line)
      line))
  (fn prompt (prompt)
    (fwrite STDOUT prompt)
    (trim (fgets STDIN))))

(fn get-prompt (expecting)
  (let [suffix (if expecting "... " "> ")]
    (if-let [ns (:: .RootNode raw-ns)]
        (. ns suffix)
        (. "pharen" suffix))))

(fn add-uses (code)
  (let [use-str (if-let [uses (get (:: .RootNode ns) (:: .RootNode uses))]
                  (reduce-to-str 
                    (lambda (ns)
                            (if (== (count ns) 2)
                              (. "use " (:ns 0) " as " (:ns 1) ";\n")
                              (. "use " (:ns 0) ";\n")))
                    uses)
                  "")]
    (substr-replace code use-str (+ (strpos code ";") 2) 0)))

(fn prn-result (x)
  (prn (cond
         ((=== NULL x) "Null")
         ((=== TRUE x) "True")
         ((=== FALSE x) "False")
         ((is-string x) (. "\"" x "\""))
         (TRUE x))))

(fn phpfy-ns (ns)
  (str-replace "-" "_" (str-replace "." "_" ns)))

(fn wrap-compile (code)
  (let [embedded-code (. "(local *1 " code ") (lambda () "") (return *1)")]
    (compile embedded-code NULL (phpfy-ns (:: .RootNode raw-ns)) (:: .RootNode last-scope))))

(fn compile-code (code)
  (local compiled-code (wrap-compile code))
  (if compiled-code
    (let [with-uses (add-uses compiled-code)
          final-code with-uses]
      final-code)
    FALSE))

(fn intro ()
  (prn (. "Initialized Pharen REPL. " (:greetings (array-rand (arr greetings))) "\n")))

(fn work ([previous-code ""])
  (let [code (. previous-code " " (prompt (get-prompt previous-code)))]
    (if (== code "quit")
      (exit 0)
      (let [compiled-code (compile-code code)]
        (if compiled-code
          (do 
            (prn-result (eval (. "?>" compiled-code)))
            (local previous-code ""))
          (local previous-code code))
        (work previous-code)))))
