(require_once "path.php")
(define "REPL_SYSTEM" (realpath (dirname __FILE__)))
(define "PHAREN_SYSTEM" (path-join REPL-SYSTEM "../"))

(require-once (. PHAREN_SYSTEM "/pharen.php"))

(def greetings ["Maybe solve P v NP!" "Happy Pharening!" "(map) new worlds!"
                "Maybe solve Hello World!" "Curly fries are delicious and cheap!"])

(if (function-exists "readline")
  (fn prompt (prompt)
    (let [line (trim (readline prompt))]
      (readline-add-history line)
      line))
  (fn prompt (prompt)
    (fwrite STDOUT prompt)
    (trim (fgets STDIN))))

(fn add-uses (code)
  (let [uses (if (isset (:(:: RootNode uses) (:: RootNode ns)))
               (reduce-to-str (lambda (ns)
                                      (if (== (count ns) 2)
                                        (. "use " (:ns 0) " as " (:ns 1) ";\n")
                                        (. "use " (:ns 0) ";\n")))
                              (:(:: RootNode uses) (:: RootNode ns)))
               "")]
    (substr-replace code uses (+ (strpos code ";") 2) 0)))

(fn prn-result (x)
  (prn (cond
         ((=== NULL x) "Null")
         ((=== TRUE x) "True")
         ((=== FALSE x) "False")
         ((is-string x) (. "\"" x "\""))
         (TRUE x))))

(fn compile-code (code)
  (let [embedded-code (. "(fn eval-func () " code ")")
        compiled-code (compile embedded-code NULL (:: Node REPL_INPUT))
        no-func-def (str-replace "function eval_func(){" "" compiled-code)
        with-uses (add-uses no-func-def)
        final-code (substr 
                    with-uses
                    0
                    (- (strrpos with-uses "}") 1))]
    final-code))

(fn intro ()
  (prn (. "Initialized Pharen REPL. " (:greetings (array-rand greetings)) "\n")))

(fn work ()
  (let [code (prompt "pharen> ")]
    (if (== code "quit")
      (exit 0)
      (let [compiled-code (compile-code code)]
        (prn-result (eval (. "?>" compiled-code)))
        (work)))))

(intro)
(compile-lang)
(work)
