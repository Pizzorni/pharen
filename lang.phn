(define "SYSTEM" (dirname __FILE__))
(define "LIB_PATH" (. SYSTEM "/lib/"))
(set-include-path (. (get-include-path) PATH_SEPARATOR LIB_PATH))
(require "sequence.php")

(defmacro comment (&exprs)
  'NULL)

(defmacro when (c &body)
  '(if ~c
     (do
       ~@body)
     NULL))

(defmacro error (&msgs)
  '(error-log (. ~@msgs)))

(defmacro not (expr)
  '(! ~expr))

(defmacro pharen-or (e1 e2)
  '(if ~e1 ~e1 ~e2)) 

(defmacro pharen-and (e1 e2)
  '(cond
     ((not ~e1) ~e1)
     ((not ~e2) ~e2)
     (TRUE      ~e2)))

(defmacro load (file)
  (local old-ns (:: RootNode ns))
  (local old-ns_string (:: RootNode ns-string))
  (local paths (explode PATH_SEPARATOR (get-include-path)))
  (local lib-path (until 
                    (lambda (path)
                            (if (file-exists (. path "/" file))
                              (. path "/" file)
                              FALSE))
                    paths))
  (compile (file-get-contents lib-path))
  (= (:: RootNode ns) old-ns)
  (= (:: RootNode ns-string) old-ns-string)
  FALSE)

(defmacro runtime (expr)
  '(let [time-start (microtime TRUE)
         result ~expr
         time-duration (- (microtime TRUE) time-start)
         time-to-display (if (> time-duration 1)
                           (. time-duration " seconds")
                           (. (* time-duration 1000)  " milliseconds"))]
     (print (. "Elapsed time: " time-to-display "\n"))
     NULL))

(defmacro thunk (&exprs)
  '(lambda () ~@exprs))

(defmacro inst? (var cls)
  '(instanceof ~var ~-cls))

(defmacro print* (&s)
  '(print (. ~@s)))

(defmacro first (xs)
  '(-> (seq ~xs) (first)))

(defmacro rest (xs)
  '(-> (seq ~xs) (rest)))

(defmacro if-let (binding then else)
  (def cond (:binding 1))
  '(if ~cond
     (let ~binding
       ~then)
     ~else))

(defmacro when-let (binding then)
  (def cond (:binding 1))
  '(when ~cond
     (let ~binding
       ~then)))

(fn prn (s)
  (do
    (print* s "\n")
    NULL))

(fn zero? (n)
  (== n 0))

(fn pos? (n)
  (> n 0))

(fn neg? (n)
  (< n 0))

(fn odd? (n)
  (== (% n 2) 1))

(fn even? (n)
  (== (% n 2) 0))

(fn str (s1 s2)
  (. s1 s2))

(fn identity (x)
  x)

(fn inc (x)
  (+ 1 x))

(fn dec (x)
  (- 1 x))

(fn flip (f arg1 arg2)
  ($f arg2 arg1))

(fn comp (&fs)
  (let [rfs (reverse fs)]
    (lambda (&args)
            (let [init (call-user-func-array (first rfs) args)]
              (reduce #apply init (rest rfs))))))

(fn zero-or-empty? (n xs)
  (or (zero? n) (empty? xs)))

(fn empty? (xs)
  (or (inst? xs PharenEmptyList) (empty xs)))

(fn seq? (x)
  (inst? x IPharenSeq))

(fn seq (x)
  (if (inst? x IPharenSeq)
    (-> x (seq))
    (:: PharenList (seqify x))))

(fn hashify (x)
  (if (inst? x PharenHashMap)
    x
    (new PharenHashMap x))) ; TODO: Do actual conversion into a hashmap-suitable data structure

(fn hash-from-pairs (pairs)
  (reduce (lambda (pair hm)
                  (assoc (:pair 0) (:pair 1) hm))
          {}
          pairs))

(defmacro lazy (list-expr)
  '(new .PharenLazyList (lambda () ~list-expr)))

(fn arr (x)
  (cond
    ((is-array x) x)
    ((inst? x "IPharenSeq") (-> x (arr)))))


(defmacro second (xs)
  '(first (rest ~xs)))

(fn first-pair (xs)
  (array-slice xs 0 1))

(fn cons (x xs)
  (if (seq? xs)
    (-> xs (cons x))
    (-> (seq xs) (cons x))))

(fn assoc (key val hm)
  (-> (hashify hm) (assoc key val)))

(fn get (key hm)
  (if (isset (:hm key))
    (:hm key)
    NULL))

(fn take (n xs)
  (if (zero-or-empty? n xs)
    []
    (cons (first xs) (take (- n 1) (rest xs)))))

(fn drop (n xs)
  (if (zero-or-empty? n xs)
    xs
    (drop (- n 1) (rest xs))))

(fn reverse (xs [acc []])
  (if (empty? xs)
    acc
    (reverse (rest xs) (cons (first xs) acc))))

(fn interpose (sep xs [acc []])
  (if (== (count xs) 1)
    [(first xs)]
    (cons (first xs) (cons sep (interpose sep (rest xs))))))

(fn partition (n xs)
  (if (empty? xs)
    xs
    (cons (take n xs) (partition n (drop n xs)))))

(fn interleave (xs ys)
  (if (or (empty? xs) (empty? ys))
    []
    (cons (first xs) (cons (first ys) (interleave (rest xs) (rest ys))))))

(fn zip-with (f xs ys)
  (if (or (empty? xs) (empty? ys))
    []
    (cons ($f (first xs) (first ys))
          (zip-with f (rest xs) (rest ys)))))


(fn seq-join (xs [glue ""])
  (implode glue (arr xs)))

(fn infinity ([n 0])
  (lazy (cons n (infinity (+ n 1)))))

(fn repeat (x)
  (lazy (cons x (repeat x))))

(fn repeatedly (f)
  (lazy (cons ($f) (repeatedly f))))

(fn iterate (f init)
  (lazy (cons init (iterate f ($f init)))))

(fn cycle (xs)
  (lazy (concat xs (cycle xs))))

(fn cycle-with (f xs)
  (lazy
    (let [new-xs (map f xs)]
      (concat xs (cycle-with f new-xs)))))

(fn vals (m)
  (array-values (arr m)))

(fn append (x xs)
  (array-merge xs [x]))

(fn apply (f val)
  ($f val))

(fn concat (xs1 xs2)
  (if (empty? xs1)
    xs2
    (cons (first xs1) (concat (rest xs1) xs2))))

(fn reduce (f acc xs)
  (if (empty? xs)
    acc
    (reduce f ($f (first xs) acc) (rest xs))))

(fn reduce-fns (fns acc xs)
  (if (empty? xs)
    acc
    (reduce-fns (rest fns) ((first fns) (first xs) acc) (rest xs))))

(fn reduce-to-str (new-val-func xs)
  (reduce (lambda (val acc)
                  (. acc ($new-val-func val)))
          "" xs))

(fn reduce-pairs (f acc xs)
  (if (empty? xs)
    acc
    (reduce-pairs f ($f (each xs) acc) (rest xs))))

(fn map (f xs)
  (if (empty? xs)
    xs
    (cons ($f (first xs)) (map f (rest xs)))))

(fn filter (f coll)
  (if (empty? coll)
    []
    (let [x (first coll), xs (rest coll)]
      (if (not ($f x))
        (filter f xs)
        (cons x (filter f xs))))))

(fn until (f xs)
  (cond 
    ((empty? xs) FALSE)
    ((local result ($f (first xs))) result)
    (TRUE (until f (rest xs)))))

(fn map-pairs (f pairs)
  (reduce-pairs (lambda (pair acc) (append ($f (:pair 0) (:pair 1)) acc))
                []
                pairs))

(defmacro attr* (access-modifier name val)
  '(access ~access-modifier (local ~name ~val)))

(defmacro attr (name val)
  '(attr* public ~name ~val))

(defmacro private-attr (name val)
  '(attr* private ~name ~val))

(defmacro static-attr (name val)
  '(attr* static ~name ~val))

(defmacro method* (access-modifier name args &code)
  '(access ~access-modifier
           (fn ~name ~args
             ~@code)))

(defmacro method (name args &code)
  '(method* public ~name ~args
            ~@code))

(defmacro private-method (name args &code)
  '(method* private ~name ~args
            ~@code))

(defmacro this (&exprs)
  '(-> this ~@exprs))

(class MultiManager
       (access static (local multis {}))

       (access static (fn matching-multi-exists (multi-name serialized-args)
                        (isset (:: self (:multis multi-name serialized-args)))))

       (access static (fn get-matching-multi (multi-name serialized-args)
                        (:: self (:multis multi-name serialized-args))))

       (access static (fn set-multi (multi-name pattern f)
                        (= (:: self (:multis multi-name pattern)) f))))



(fn multi-serialize-args (vals)
  (reduce-concat (lambda (val)
                         (cond
                           ((is-string val) "str")
                           ((is-int val) "int")
                           ((is-float val) "float")
                           ((is-bool val) "bool")
                           ((is-array val) (if (isset (:val "_multitype")) (:val "_multitype") "5"))
                           ((is-object val) (get-class val))))
                 vals))

(fn multi-serialize-pattern (pattern)
  (implode pattern))

(fn get-multi (name args)
  (let [serialized-args (multi-serialize-args args)]
    (if (:: MultiManager (matching-multi-exists name serialized-args))
      (:: MultiManager (get-matching-multi name serialized-args))
      "No matching pattern")))

(defmacro defmulti (nm args)
  '(fn ~-nm (~@args)
     ((get-multi ~nm (func-get-args)) ~@args)))

(defmacro defmethod (name pattern args &body)
  '(:: MultiManager (set-multi ~name (multi-serialize-pattern ~pattern) (lambda (a) ~@body))))
