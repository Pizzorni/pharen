(define "SYSTEM" (dirname __FILE__))
(define "LIB_PATH" (. SYSTEM "/lib/"))
(set-include-path (. (get-include-path) PATH_SEPARATOR LIB_PATH))
(require "sequence.php")

(defmacro when (c &body)
  '(if ~c
     (do
       ~@body)
     NULL))

(defmacro error (&msgs)
  '(error-log (. ~@msgs)))

(defmacro not (expr)
  '(! ~expr))

(defmacro pharen-or (e1 e2)
  '(if ~e1 ~e1 ~e2)) 

(defmacro pharen-and (e1 e2)
  '(cond
     ((not ~e1) ~e1)
     ((not ~e2) ~e2)
     (TRUE      ~e2)))

(defmacro load (file)
  (local paths (explode PATH_SEPARATOR (get-include-path)))
  (local lib-path (until 
                    (lambda (path)
                            (if (file-exists (. path "/" file))
                              (. path "/" file)
                              FALSE))
                    paths))
  (compile-file lib-path)
  FALSE)

(defmacro inst? (var cls)
  '(instanceof ~var ~-cls))

(defmacro print* (&s)
  '(print (. ~@s)))

(fn zero? (n)
  (== n 0))

(fn pos? (n)
  (> n 0))

(fn neg? (n)
  (< n 0))

(fn str (s1 s2)
  (. s1 s2))

(fn flip (f arg1 arg2)
  ($f arg2 arg1))

(fn zero-or-empty? (n xs)
  (or (zero? n) (empty? xs)))

(fn empty? (xs)
  (=== (count xs) 0))

(fn seq (x)
  (if (inst? x IPharenSeq)
    (-> x (seq))
    (:: PharenList (seqify x))))

(fn arr (x)
  (cond
    ((is-array x) x)
    ((inst? x "IPharenSeq") (-> x (arr)))))

(defmacro first (xs)
  '(-> (seq ~xs) first))

(defmacro second (xs)
  '(first (rest ~xs)))

(fn first-pair (xs)
  (array-slice xs 0 1))

(defmacro rest (xs)
  '(-> (seq ~xs) rest))

(fn cons (x xs)
  (-> (seq xs) (cons x)))

(fn take (n xs [acc []])
  (if (zero-or-empty? n xs)
    acc
    (take (- n 1) (rest xs) (cons (first xs) acc))))

(fn drop (n xs)
  (if (zero-or-empty? n xs)
    xs
    (drop (- n 1) (rest xs))))

(fn reverse (xs [acc []])
  (if (empty? xs)
    acc
    (reverse (rest xs) (cons (first xs) acc))))

(fn interpose (sep xs [acc []])
  (if (== (count xs) 1)
    [(first xs)]
    (cons (first xs) (cons sep (interpose sep (rest xs))))))

(fn partition (xs n [acc []])
  (if (empty? xs)
    acc
    (partition (drop n xs) n (cons (take n xs) acc))))

(fn seq-join (xs [glue ""])
  (implode glue (arr xs)))

(fn vals (m)
  (array-values (arr m)))

(fn append (x xs)
  (array-merge xs [x]))

(fn apply (f val)
  ($f val))

(fn reduce (f acc xs)
  (if (empty? xs)
    acc
    (reduce f ($f (first xs) acc) (rest xs))))

(fn reduce-concat (new-val-func xs)
  (reduce (lambda (val acc)
                  (. acc ($new-val-func val)))
          "" xs))

(fn reduce-pairs (f acc xs)
  (if (empty? xs)
    acc
    (reduce-pairs f ($f (each xs) acc) (rest xs))))

(fn map (f xs)
  (if (empty? xs)
    xs
    (cons ($f (first xs)) (map f (rest xs)))))

(fn filter (f coll)
  (if (empty? coll)
    coll
    (let [x (first coll), xs (rest coll)]
      (if ($f x)
        (cons x (filter f xs))
        (filter f xs)))))

(fn until (f xs)
  (cond 
    ((empty? xs) FALSE)
    ((local result ($f (first xs))) result)
    (TRUE (until f (rest xs)))))

(fn map-pairs (f pairs)
  (reduce-pairs (lambda (pair acc) (append ($f (:pair 0) (:pair 1)) acc))
                []
                pairs))


(defmacro attr* (access-modifier name val)
  '(access ~access-modifier (local ~name ~val)))

(defmacro attr (name val)
  '(attr* public ~name ~val))

(defmacro private-attr (name val)
  '(attr* private ~name ~val))

(defmacro static-attr (name val)
  '(attr* static ~name ~val))

(defmacro method* (access-modifier name args &code)
  '(access ~access-modifier
           (fn ~name ~args
             ~@code)))

(defmacro method (name args &code)
  '(method* public ~name ~args
            ~@code))

(defmacro private-method (name args &code)
  '(method* private ~name ~args
            ~@code))

(defmacro this (&exprs)
  '(-> this ~@exprs))

(class MultiManager
       (access static (local multis {}))

       (access static (fn matching-multi-exists (multi-name serialized-args)
                        (isset (:: self (:multis multi-name serialized-args)))))

       (access static (fn get-matching-multi (multi-name serialized-args)
                        (:: self (:multis multi-name serialized-args))))

       (access static (fn set-multi (multi-name pattern f)
                        (= (:: self (:multis multi-name pattern)) f))))



(fn multi-serialize-args (vals)
  (reduce-concat (lambda (val)
                         (cond
                           ((is-string val) "str")
                           ((is-int val) "int")
                           ((is-float val) "float")
                           ((is-bool val) "bool")
                           ((is-array val) (if (isset (:val "_multitype")) (:val "_multitype") "5"))
                           ((is-object val) (get-class val))))
                 vals))

(fn multi-serialize-pattern (pattern)
  (implode pattern))

(fn get-multi (name args)
  (let [serialized-args (multi-serialize-args args)]
    (if (:: MultiManager (matching-multi-exists name serialized-args))
      (:: MultiManager (get-matching-multi name serialized-args))
      "No matching pattern")))

(defmacro defmulti (nm args)
  '(fn ~-nm (~@args)
     ((get-multi ~nm (func-get-args)) ~@args)))

(defmacro defmethod (name pattern args &body)
  '(:: MultiManager (set-multi ~name (multi-serialize-pattern ~pattern) (lambda (a) ~@body))))
