(define "SYSTEM" (dirname __FILE__))
(require_once (. SYSTEM "/lexical.php"))
(define "LIB_PATH" (. SYSTEM "/lib/"))
(set_include_path (. (get_include_path) PATH_SEPARATOR LIB_PATH))

(defmacro when (c &body)
  '(if ~c
     (do
       ~@body)
     FALSE))

(defmacro error (&msgs)
  '(error-log (. ~@msgs)))

(defmacro not (expr)
  '(! ~expr))

(fn first (xs)
  (:xs 0))

(fn first-pair (xs)
  (array-slice xs 0 1))

(fn rest (xs)
  (array-slice xs 1))

(fn early (xs)
  (array-slice xs 0 -1))

(fn take (x xs)
  (array-slice xs 0 x))

(fn drop (x xs)
  (array-slice xs x))

(fn cons (x xs)
  (array-merge [x] xs))

(fn append (x xs)
  (array-merge xs [x]))

(fn apply (f val)
  ($f val))

(fn reduce (f acc xs)
  (if (empty xs)
    acc
    (reduce f ($f (first xs) acc) (rest xs))))

(fn reduce-pairs (f acc xs)
  (if (empty xs)
    acc
    (reduce-pairs f ($f (each xs) acc) (rest xs))))

(fn map (f xs)
  (reduce (lambda (x acc) (append ($f x) acc)) 
          []
          xs))

(fn filter (f1 xs)
  (reduce (lambda (x acc)
                  (if (f1 x)
                    (cons x acc)
                    acc))
          []
          xs))

(fn for-n (x f acc)
  (if (== 0 x)
    acc
    (for-n (- x 1) f ($f acc))))

(fn map-pairs (f pairs)
  (reduce-pairs (lambda (pair acc) (append ($f (:pair 0) (:pair 1)) acc))
                []
                pairs))
