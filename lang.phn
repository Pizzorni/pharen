(define "SYSTEM" (dirname __FILE__))
(require_once (. SYSTEM "/lexical.php"))
(define "LIB_PATH" (. SYSTEM "/lib/"))
(set-include-path (. (get-include-path) PATH_SEPARATOR LIB_PATH))

(defmacro when (c &body)
  '(if ~c
     (do
       ~@body)
     FALSE))

(defmacro error (&msgs)
  '(error-log (. ~@msgs)))

(defmacro not (expr)
  '(! ~expr))

(defmacro load (file)
  (local paths (explode PATH_SEPARATOR (get-include-path)))
  (local lib-path (until 
                    (lambda (path)
                            (if (file-exists (. path "/" file))
                              (. path "/" file)
                              FALSE))
                    paths))
  (compile-file lib-path)
  FALSE)

(fn first (xs)
  (:xs 0))

(fn first-pair (xs)
  (array-slice xs 0 1))

(fn rest (xs)
  (array-slice xs 1))

(fn early (xs)
  (array-slice xs 0 -1))

(fn take (x xs)
  (array-slice xs 0 x))

(fn drop (x xs)
  (array-slice xs x))

(fn cons (x xs)
  (array-merge [x] xs))

(fn append (x xs)
  (array-merge xs [x]))

(fn apply (f val)
  ($f val))

(fn reduce (f acc xs)
  (if (empty xs)
    acc
    (reduce f ($f (first xs) acc) (rest xs))))

(fn reduce-concat (new-val-func xs)
  (reduce (lambda (val acc)
                  (. acc ($new-val-func val)))
          "" xs))

(fn reduce-pairs (f acc xs)
  (if (empty xs)
    acc
    (reduce-pairs f ($f (each xs) acc) (rest xs))))

(fn map (f xs)
  (reduce (lambda (x acc) (append ($f x) acc)) 
          []
          xs))

(fn filter (f1 xs)
  (reduce (lambda (x acc)
                  (if (f1 x)
                    (cons x acc)
                    acc))
          []
          xs))

(fn for-n (x f acc)
  (if (== 0 x)
    acc
    (for-n (- x 1) f ($f acc))))

(fn until (f xs)
  (cond 
    ((empty xs) FALSE)
    ((local result ($f (first xs))) result)
    (TRUE (until f (rest xs)))))

(fn map-pairs (f pairs)
  (reduce-pairs (lambda (pair acc) (append ($f (:pair 0) (:pair 1)) acc))
                []
                pairs))

(class MultiManager
       (access static (local multis {}))

       (access static (fn matching-multi-exists (multi-name serialized-args)
                        (isset (:: self (:multis multi-name serialized-args)))))

       (access static (fn get-matching-multi (multi-name serialized-args)
                        (:: self (:multis multi-name serialized-args))))

       (access static (fn set-multi (multi-name pattern f)
                        (= (:: self (:multis multi-name pattern)) f))))



(fn multi-serialize-args (vals)
  (reduce-concat (lambda (val)
                         (cond
                           ((is-string val) "str")
                           ((is-int val) "int")
                           ((is-float val) "float")
                           ((is-bool val) "bool")
                           ((is-array val) (if (isset (:val "_multitype")) (:val "_multitype") "5"))
                           ((is-object val) (get-class val))))
                 vals))

(fn multi-serialize-pattern (pattern)
  (implode pattern))

(fn get-multi (name args)
  (let [serialized-args (multi-serialize-args args)]
    (if (:: MultiManager (matching-multi-exists name serialized-args))
      (:: MultiManager (get-matching-multi name serialized-args))
      "No matching pattern")))

(defmacro defmulti (nm args)
  '(fn ~-nm (~@args)
     ((get-multi ~nm (func-get-args)) ~@args)))

(defmacro defmethod (name pattern args &body)
  '(:: MultiManager (set-multi ~name (multi-serialize-pattern ~pattern) (lambda (a) ~@body))))
